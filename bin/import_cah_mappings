#!/usr/bin/env ruby

# require 'dfe/reference_data/record'
# require 'dfe/reference_data/reference_list'
require 'dfe/reference_data/hardcoded_reference_list'

require 'csv'
require 'awesome_print'

cah_l1 = {}
cah_l2 = {}
cah_l3 = {}

hecos_map = {}

begin
  File.open('CAH_Groupings.csv') do |groupings|
    File.open('HECoS_CAH_Mappings.csv') do |hecos_mappings|
      puts 'Reading CAH_Groupings.csv...'
      CSV.foreach(groupings, headers: true) do |row|
        l1 = row['CAH1_Code']
        l1_label = row['CAH1_Label']
        l2 = row['CAH2_Code']
        l2_label = row['CAH2_Label']
        l3 = row['CAH3_Code']
        l3_label = row['CAH3_Label']

        cah_l3[l3] = { name: l3_label, l1: l1, l2: l2 }

        if cah_l2.key?(l2)
          cah_l2[l2][:l3_children].add(l3)
        else
          cah_l2[l2] = { name: l2_label, l1: l1, l3_children: Set[l3] }
        end

        if cah_l1.key?(l1)
          cah_l1[l1][:l2_children].add(l2)
        else
          cah_l1[l1] = { name: l1_label, l2_children: Set[l2] }
        end
      end

      puts 'Reading HECoS_CAH_Mappings.csv...'
      CSV.foreach(hecos_mappings, headers: true) do |row|
        hecos_code = row['HECoS_Code']
        l3 = row['CAH3_Code']
        hecos_map[hecos_code] = { cah_l3_id: l3 }
      end
    end
  end
rescue Errno::ENOENT
  puts 'The files CAH_Groupings.csv and HECoS_CAH_Mappings.csv must be present in the current directory'
  puts 'They can be downloaded from https://www.hesa.ac.uk/support/documentation/hecos/cah'
  puts 'Make sure to tick "Include prefix \'CAH\' in codes" and "Include code labels"'
end

## Fold sets down to lists

cah_l1.transform_values! do |value|
  value[:l2_children] = value[:l2_children].to_a
  value
end

cah_l2.transform_values! do |value|
  value[:l3_children] = value[:l3_children].to_a
  value
end

## Generate outputs

def output_list(file, name, contents, **meta)
  file.write("    #{name} = DfE::ReferenceData::HardcodedReferenceList.new(\n")
  file.write("      #{contents.ai(plain: true, index: false)},\n")
  meta.each do |key, value|
    file.write("      #{key}: #{value.ai(plain: true, index: false)},\n")
  end
  file.write("    )\n")
end

File.open('lib/dfe/reference_data/cah.rb', 'w') do |file|
  puts 'Generating lib/dfe/reference_data/cah.rb...'

  file.write("##\n")
  file.write("## AUTOGENERATED FILE - DO NOT EDIT\n")
  file.write("##\n")
  file.write("## Generated by import_cah_mappings - rerun the script to regenerate this!\n")
  file.write("## Don't forget to run rake rubocop:auto_correct afterwards to fix the indentation.\n")
  file.write("##\n")
  file.write("module DfE\n")
  file.write("  module ReferenceData\n")
  file.write("    module CommonAggregationHierarchy\n")

  output_list(file, 'CAH_CATEGORIES_L1', cah_l1,
              schema: {
                id: :string,
                name: :string,
                l2_children: { kind: :array, element_schema: :string }
              },
              list_description: 'CAH Level 1 categories',
              list_docs_url: 'FIXME',
              field_descriptions: {
                id: 'A unique identifier',
                name: 'The name of the level 1 category',
                l2_children: 'The IDs of this category\'s level 2 children'
              })

  output_list(file, 'CAH_CATEGORIES_L2', cah_l2,
              schema: {
                id: :string,
                name: :string,
                l1: :string,
                l3_children: { kind: :array, element_schema: :string }
              },
              list_description: 'CAH Level 2 categories',
              list_docs_url: 'FIXME',
              field_descriptions: {
                id: 'A unique identifier',
                name: 'The name of the level 2 category',
                l1: 'The ID of this category\'s level 1 parent',
                l2_children: 'The IDs of this category\'s level 3 children'
              })

  output_list(file, 'CAH_CATEGORIES_L3', cah_l3,
              schema: {
                id: :string,
                l1: :string,
                l2: :string,
                name: :string
              },
              list_description: 'CAH Level 3 categories',
              list_docs_url: 'FIXME',
              field_descriptions: {
                id: 'A unique identifier',
                l1: 'The ID of this category\'s level 1 grandparent',
                l2: 'The ID of this category\'s level 2 parent',
                name: 'The name of the level 3 category'
              })

  output_list(file, 'HECOS_CAH_SUBJECT_MAPPINGS', hecos_map,
              schema: {
                id: :string,
                cah_l3_id: :string
              },
              list_description: 'CAH level 3 codes for HECoS subjects',
              list_docs_url: 'FIXME',
              field_descriptions: {
                id: 'A HECoS subject code',
                cah_l3_id: 'The CAH level 3 ID corresponding to this HECoS subject'
              })
  file.write("    end\n")
  file.write("  end\n")
  file.write("end\n")
end
